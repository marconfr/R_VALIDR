theme_light() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste(string)) +
xlab(paste("Concentration levels ", cUNIT)) +
ylab("Relative error (%)") +
labs(color = "Serie")
return(p)
}
for (x in 1:length(listVALID)) {
print(ggplotly(plot_validation(as.data.frame(listVALID[[x]]), names(listVALID[x]))))
}
#testing
compute_validation_data(DATA)
#viewing
check = listVALID[["LIN"]]
plot_validation <- function(data, string) {
p <- ggplot(data, aes(x = CONC_LEVEL, y = ERROR_pc, color = as.factor(SERIE))) +
geom_hline(yintercept = nACC_LIMIT, color = "red", linetype = "dashed") +
geom_hline(yintercept = -nACC_LIMIT, color = "red", linetype = "dashed") +
geom_hline(yintercept = 0, color = "red", linetype = "dotted") +
geom_point() +
geom_line(data = data %>% select(-SERIE, -pass) %>%
group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)),
aes(x = CONC_LEVEL, y = TVL_RELATIVE), color = "blue") +
geom_line(data = data %>% select(-SERIE, -pass) %>%
group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)),
aes(x = CONC_LEVEL, y = TVH_RELATIVE), color = "blue") +
geom_line(data = data %>% select(-SERIE, -pass) %>%
group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)),
aes(x = CONC_LEVEL, y = BIAS_pc), color = "black") +
theme_light() +
scale_color_viridis(discrete = TRUE) +
ggtitle(paste(string)) +
xlab(paste("Concentration levels ", cUNIT)) +
ylab("Relative error (%)") +
labs(color = "Serie")
return(p)
}
for (x in 1:length(listVALID)) {
print(ggplotly(plot_validation(as.data.frame(listVALID[[x]]), names(listVALID[x]))))
}
summary_validation <- function(data, string) {
string2 <- paste(string, "hat", sep = "_")
t <- data %>%
group_by(CONC_LEVEL) %>%
select(-SERIE, -pass) %>%
summarize_all(~ mean(.x, na.rm = TRUE)) %>%
select(CONC_LEVEL, string2, BIAS, BIAS_pc, RECOV_LIN_pc, STDEV_REP, VAR_BS, STDEV_FI, CV_REP, CV_IP, TVL_ABS, TVH_ABS, TVL_RELATIVE, TVH_RELATIVE) %>%
mutate(pass = ifelse(TVL_RELATIVE <- nACC_LIMIT & TVH_RELATIVE > nACC_LIMIT, "PASS", "FAIL")) %>%
kableExtra::kable(col.names = c(
paste("Introduced concentrations ", cUNIT),
paste("Mean calculated concentrations ", cUNIT),
paste("Bias ", cUNIT),
"Bias (%)",
"Recovery (%)",
paste("Repeatability SD ", cUNIT),
paste("Between series SD ", cUNIT),
paste("Intermediate precision SD ", cUNIT),
"CV repeatability (%)",
"CV intermediate precision (%)",
paste("Low limit of tolerance ", cUNIT),
paste("High limit of tolerance ", cUNIT),
"Low limit of tolerance (%)",
"High limit of tolerance (%)",
"Results"
), caption = paste("Trueness and precision estimators and limits (", string, ")")) %>%
kable_styling("hover")
return(t)
}
for (x in 1:length(listVALID)) {
print(summary_validation(as.data.frame(listVALID[[x]]), names(listVALID[x])))
}
check = listVALID[["LIN"]]
print(summary_validation(as.data.frame(listVALID[[LIN]]), names(listVALID[LIN])))
print(summary_validation(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"])))
print(ggplotly(plot_linearity(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"]))))
plot_linearity <- function(data, string) {
p <- ggplot(data, aes(x = CONC_LEVEL, y = data[, 4])) +
geom_abline(slope = 1, color = "red", linetype = "dashed") +
geom_point(aes(color = as.factor(SERIE))) +
geom_line(data = data %>% select(-SERIE, -pass) %>% group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)), aes(x = CONC_LEVEL, y = TVL_ABS), color = "blue") +
geom_line(data = data %>% select(-SERIE, -pass) %>% group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)), aes(x = CONC_LEVEL, y = TVH_ABS), color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x) +
theme_light() +
ggtitle(paste(string)) +
scale_color_viridis(discrete = TRUE) +
xlab(paste("Concentration levels", cUNIT)) +
ylab(paste("Calculated concentrations ", cUNIT)) +
labs(color = "Serie")
return(p)
}
print(ggplotly(plot_linearity(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"]))))
print(summary_validation(as.data.frame(listVALID[[LIN]]), names(listVALID[LIN])))
print(summary_validation(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"])))
print(ggplotly(plot_validation(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"]))))
View(listVALID)
ggplotly(plot_residues(dfASSAY))
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(dplyr)
require(rlm)
require(datalist)
require(modelr)
require(data.table)
require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(dplyr)
require(rlm)
require(datalist)
require(modelr)
require(data.table)
require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(dplyr)
require(rlm)
require(datalist)
require(modelr)
require(data.table)
require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 10
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(dplyr)
require(rlm)
require(datalist)
require(modelr)
require(data.table)
require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 10
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
compute_validation_data(dfASSAY)
p <- ggplot(data, aes(x = CONC_LEVEL, y = data[, 4])) +
geom_abline(slope = 1, color = "red", linetype = "dashed") +
geom_point(aes(color = as.factor(SERIE))) +
geom_line(data = data %>% select(-SERIE, -pass) %>% group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)), aes(x = CONC_LEVEL, y = TVL_ABS), color = "blue") +
geom_line(data = data %>% select(-SERIE, -pass) %>% group_by(CONC_LEVEL) %>% summarize_all(~ mean(.x, na.rm = TRUE)), aes(x = CONC_LEVEL, y = TVH_ABS), color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "black", formula = y ~ x, linewidth=0.5) +
theme_light() +
ggtitle(paste(string)) +
scale_color_viridis(discrete = TRUE) +
xlab(paste("Concentration levels", cUNIT)) +
ylab(paste("Calculated concentrations ", cUNIT)) +
labs(color = "Serie")
knitr::opts_chunk$set(echo = FALSE)
#require(readr)
require(dplyr)
#require(rlm)
#require(datalist)
#require(modelr)
require(data.table)
#require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
require(papeR)
#knitr::write_bib(c(.packages()), file = "packages.bib")
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 20
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
calib_curves <- data.frame("method"=character(),
"series"=character(),
"intercept"=numeric(),
"slope"=numeric(),
"aic"=numeric(),
"r2"=numeric())
diag_calib <- data.frame(resid=numeric())
compute_calibration_curves(dfASSAY)
ggplotly(print_plot_standards(dfASSAY, "CAL"))
calib_curves %>% arrange(method) %>%
kableExtra::kable(col.names = c('Methods', 'Serie', 'Intercept', 'Slope', 'AIC', "RÂ²"),
caption = "Results of linear regressions performed") %>%
kable_styling("hover")
ggplotly(plot_residues(dfASSAY))
compute_validation_data(dfASSAY)
summary_validation_abs(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"]))
summary_validation_rel(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"]))
ggplotly(plot_validation(as.data.frame(listVALID[["LIN"]]), names(listVALID["LIN"])))
View(dfASSAY)
View(dfASSAY)
View(dfASSAY)
View(listVALID)
listVALID[["LIN"]]$CONC_LEVEL
string<-"LIN"
listVALID[[get(string)]]$CONC_LEVEL
listVALID[[string]]$CONC_LEVEL
lm(listVALID[[string]]$CONC_LEVEL~listVALID[[string]]$string)
linear_model <- lm(listVALID[[string]]$CONC_LEVEL~listVALID[[string]]$paste0(string))
listVALID[[string]]$string
listVALID[[string]]$LIN
listVALID[[string]]$get(string)
listVALID[[string]]$[,4]
listVALID[[string]][,4]
t<-listVALID[["LIN"]][,4]
View(t)
dLIN<-data.frame(y=listVALID[[string]][,4],x=listVALID[[string]][,1])
View(dLIN)
dLIN<-data.frame("y"=listVALID[[string]][,4],"x"=listVALID[[string]][,1])
View(dLIN)
dLIN<-data.frame("y"=listVALID[[string]][,4],"x"=listVALID[[string]][,0])
dLIN<-data.frame("y"=listVALID[[string]][,4],"x"=listVALID[[string]][,2])
View(dLIN)
dLIN<-data.frame(listVALID[[string]][,2],listVALID[[string]][,4])
names(dLIN[1])<-"x"
names(dLIN[2])<-"y"
linear_model <- lm(y~x,dLIN)
dLIN<-data.frame(listVALID[[string]][,2],listVALID[[string]][,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
linear_model <- lm(y~x,dLIN)
View(linear_model)
kbl(prettify(summary(linear_model_stat(listVALID,"LIN")))[,1:7],
caption = 'Results of the linear regression.') %>%
kable_styling(full_width = F, position = "left")
linear_model_stat(listVALID,"LIN")
linear_model_stat(listVALID,LIN)
return(linear_model)
linear_model_stat(data){
linear_model_stat <- function(data) {
dLIN<-data.frame(data[,2],data[,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
linear_model <- lm(y~x,dLIN)
return(linear_model)
}
linear_model_stat(listVALID,"LIN")
linear_model_stat <- function(data) {
dLIN<-data.frame(data[,2],data[,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
linear_model <- lm(y~x,dLIN)
return(linear_model)
}
linear_model_stat(listVALID)
linear_model_stat(listVALID[["LIN"]])
kbl(prettify(summary(linear_model_stat(listVALID[["LIN"]])))[,1:7],
caption = 'Results of the linear regression.') %>%
kable_styling(full_width = F, position = "left")
kbl(prettify(summary(linear_model_stat(listVALID[["LIN"]]))),
caption = 'Results of the linear regression.') %>%
kable_styling(full_width = F, position = "left")
anova_model_stat <- function(data) {
dLIN<-data.frame(data[,2],data[,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
linear_model <- aov(y~x,dLIN)
return(linear_model)
}
anova_model_stat <- function(data) {
dLIN<-data.frame(data[,2],data[,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
aov_model <- aov(y~x,dLIN)
return(aov_model)
}
aov_model_stat(listVALID[["LIN"]])
anova_model_stat(listVALID[["LIN"]])
rmd.anova.table(anova_model_stat(listVALID[["LIN"]]))
anova_model_stat(listVALID[["LIN"]]) %>%  kable()
anova_model_stat(listVALID[["LIN"]]) %>%  kable()
anova_model_stat(listVALID[["LIN"]])
l <-anova_model_stat(listVALID[["LIN"]])
View(l)
aov_model <- anova(y~x,dLIN)
anova_model_stat <- function(data) {
dLIN<-data.frame(data[,2],data[,4])
names(dLIN)[1]<-"x"
names(dLIN)[2]<-"y"
aov_model <- anova(y~x,dLIN)
return(aov_model)
}
l <-anova_model_stat(listVALID[["LIN"]])
anova_model_stat <- function(data) {
linear_model_stat(data)
aov_model <- anova(y~x,dLIN)
return(aov_model)
}
aov_model <- anova(linear_model_stat(data))
anova_model_stat <- function(data) {
aov_model <- anova(linear_model_stat(data))
return(aov_model)
}
anova_model_stat(listVALID[["LIN"]])
anova_model_stat(listVALID[["LIN"]]) %>%  kable()
kbl(anova_model_stat(listVALID[["LIN"]]))
kbl(prettify(anova_model_stat(listVALID[["LIN"]])))
kbl(prettify(anova_model_stat(listVALID[["LIN"]])),
caption = 'Results of the linear regression.') %>%
kable_styling(full_width = F, position = "left")
knitr::opts_chunk$set(echo = FALSE)
#require(readr)
require(dplyr)
#require(rlm)
#require(datalist)
#require(modelr)
require(data.table)
#require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
require(papeR)
require(lmtest)
#knitr::write_bib(c(.packages()), file = "packages.bib")
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 20
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
kbl(prettify(anova_model_stat(listVALID[["LIN"]])),
caption = 'Results of the anova analysis') %>%
kable_styling(full_width = F, position = "left")
kbl(anova_model_stat(listVALID[["LIN"]]),
caption = 'Results of the anova analysis') %>%
kable_styling(full_width = F, position = "left")
anova_model_stat <- function(data) {
bp <- bptest(linear_model_stat(data))
return(bp)
}
kbl(anova_model_stat(listVALID[["LIN"]]),
caption = 'Results of the anova analysis') %>%
kable_styling(full_width = F, position = "left")
anova_model_stat(listVALID[["LIN"]])
bptest(linear_model_stat(data))
bptest(linear_model_stat(listVALID[["LIN"]]))
pretiffy(bptest(linear_model_stat(listVALID[["LIN"]])))
bptest(linear_model_stat(listVALID[["LIN"]]))
knitr::opts_chunk$set(echo = FALSE)
#require(readr)
require(dplyr)
#require(rlm)
#require(datalist)
#require(modelr)
require(data.table)
#require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
require(papeR)
require(lmtest)
require(broom)
#knitr::write_bib(c(.packages()), file = "packages.bib")
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 20
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))))
?stargazer
?stargazer()
knitr::opts_chunk$set(echo = FALSE)
#require(readr)
require(dplyr)
#require(rlm)
#require(datalist)
#require(modelr)
require(data.table)
#require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
require(papeR)
require(lmtest)
require(stargazer)
#knitr::write_bib(c(.packages()), file = "packages.bib")
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 20
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))))
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))), style="HTML")
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))), style="html")
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))), type="html")
print(stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))), type="html"))
print(stargazer(bptest(linear_model_stat(listVALID[["LIN"]])), type="html"))
print(stargazer(bptest(linear_model_stat(listVALID[["LIN"]])), type="html"))
stargazer(bptest(linear_model_stat(listVALID[["LIN"]])), type="html")
stargazer(tidy(bptest(linear_model_stat(listVALID[["LIN"]]))), type="html")
knitr::kable(bptest(linear_model_stat(listVALID[["LIN"]]))), type="html"))
knitr::kable(bptest(linear_model_stat(listVALID[["LIN"]])), type="html"))
knitr::kable(bptest(linear_model_stat(listVALID[["LIN"]]))
knitr::kable(bptest(linear_model_stat(listVALID[["LIN"]])))
knitr::kable(bptest(linear_model_stat(listVALID[["LIN"]])))
bptest(linear_model_stat(listVALID[["LIN"]]))
summary(bptest(linear_model_stat(listVALID[["LIN"]])))
pander(bptest(linear_model_stat(listVALID[["LIN"]])))
knitr::opts_chunk$set(echo = FALSE)
#require(readr)
require(dplyr)
#require(rlm)
#require(datalist)
#require(modelr)
require(data.table)
#require(bblme)
require(ggplot2)
require(kableExtra)
require(plotly)
require(viridis)
require(ggpmisc)
require(readxl)
require(papeR)
require(lmtest)
require(pander)
#knitr::write_bib(c(.packages()), file = "packages.bib")
dfASSAY <- read_excel("data_valid.xlsx")
dfASSAY <- as.data.table(dfASSAY)
nBETA <- 0.9
cUNIT <- "(ng/mL)"
nACC_LIMIT <- 20
source("./R/global.R", local = knitr::knit_global())
source("SCRIPT.R", local = knitr::knit_global())
pander(bptest(linear_model_stat(listVALID[["LIN"]])))
?pander()
pander(bptest(linear_model_stat(listVALID[["LIN"]])))
pander(bptest(linear_model_stat(listVALID[["LIN"]])), caption="Result od the studentized Breusch-Pagan test")
kbl(pander(bptest(linear_model_stat(listVALID[["LIN"]]))), caption="Result od the studentized Breusch-Pagan test")
kbl(bptest(linear_model_stat(listVALID[["LIN"]])), caption="Result od the studentized Breusch-Pagan test")
pander(bptest(linear_model_stat(listVALID[["LIN"]])), caption="Result od the studentized Breusch-Pagan test"))
pander(bptest(linear_model_stat(listVALID[["LIN"]])), caption="Result od the studentized Breusch-Pagan test")
pander(bptest(linear_model_stat(listVALID[["LIN"]])), caption="Result of the studentized Breusch-Pagan test")
bptest(linear_model_stat(listVALID[["LIN"]])
)
bptest(linear_model_stat(listVALID[["LIN"]]))
l<-bptest(linear_model_stat(listVALID[["LIN"]]))
View(l)
bptest(linear_model_stat(listVALID[["LIN"]])$p.value
)
bptest(linear_model_stat(listVALID[["LIN"]]))$p.value
linear_model_stat(listVALID[["LIN"]]
)
summary(linear_model_stat(listVALID[["LIN"]]))
l<-summary(linear_model_stat(listVALID[["LIN"]]))
l<-summary(linear_model_stat(listVALID[["LIN"]]))$coefficients[,4]
(summary(linear_model_stat(listVALID[["LIN"]]))$coefficients[,4])ð¥
(summary(linear_model_stat(listVALID[["LIN"]]))$coefficients[,4])$x
(summary(linear_model_stat(listVALID[["LIN"]]))$coefficients[1,4])
(summary(linear_model_stat(listVALID[["LIN"]]))$coefficients[2,4])
install.packages("tufte")
shiny::runApp()
runApp()
shiny::runApp()
getwd()
runApp()
runApp()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/DATA_R/R_PROJET_VALIDER")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
